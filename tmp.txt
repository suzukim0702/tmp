import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;

public class TimestampGenerator {

    // yyyyMM形式の文字列を受け取って、その月の初日と次の月の初日のTimestampを返すメソッド
    public static Pair<Timestamp, Timestamp> generateTimestamps(String yyyyMM) {
        // yyyyMM形式のフォーマッタを用意
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyyMM");

        // 文字列をLocalDateに変換（yyyy-MM-01となる）
        LocalDate firstDayOfMonth = LocalDate.parse(yyyyMM + "01", formatter);

        // 月初日の0時のTimestampを取得
        Timestamp firstDayTimestamp = Timestamp.valueOf(firstDayOfMonth.atStartOfDay());

        // 次の月の初日の0時を取得
        LocalDate firstDayOfNextMonth = firstDayOfMonth.plusMonths(1);
        Timestamp firstDayOfNextMonthTimestamp = Timestamp.valueOf(firstDayOfNextMonth.atStartOfDay());

        // 2つのTimestampをPairとして返す
        return new Pair<>(firstDayTimestamp, firstDayOfNextMonthTimestamp);
    }

    // テスト用のメインメソッド
    public static void main(String[] args) {
        String yyyyMM = "202310";  // 例: 2023年10月

        Pair<Timestamp, Timestamp> timestamps = generateTimestamps(yyyyMM);

        System.out.println("月の初日の0時: " + timestamps.getFirst());
        System.out.println("次の月の初日の0時: " + timestamps.getSecond());
    }
}

// シンプルなPairクラス（Javaには標準的なPairクラスがないため作成）
class Pair<T, U> {
    private final T first;
    private final U second;

    public Pair(T first, U second) {
        this.first = first;
        this.second = second;
    }

    public T getFirst() {
        return first;
    }

    public U getSecond() {
        return second;
    }
}
